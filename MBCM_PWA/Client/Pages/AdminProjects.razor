@page "/adminprojects"
@using MBCM_PWA.Client.Shared.Models;
@using System.Net.Http.Json;
@using System.Text.Json;
@inject HttpClient HttpClient


<h3>All Projects: </h3>
<div class="project-grid">
    @foreach (var project in projects)
    {
        <div class="project-cell">
            <h4>@project.prjTitle</h4>
            <h4>@project.prjDescription</h4>
        </div>
    }
</div>

<h3>Active Projects: </h3>
<div class="project-grid">
    @{
        var groupedUserProjects = userProjects.GroupBy(up => up.projectID);
    }
    @foreach (var group in groupedUserProjects)
    {
        <div class="project-cell">
            <h4>@group.First().Project.prjTitle</h4>

            <div>
                Members:
                @foreach (var userProject in group)
                {
                    <div>
                        - @userProject.User.firstName @userProject.User.lastName
                        <button class="btn btn-danger" @onclick="() => ConfirmRemoveUserFromProject(userProject.userProjectID)">Remove</button>
                    </div>
                }
            </div>
        </div>
    }
</div>

@if (showConfirmation)
{
    <div class="modal" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Removal</h5>
                    <button type="button" class="btn-close" @onclick="CancelRemoveUserFromProject"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to remove the user from the project?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelRemoveUserFromProject">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="RemoveUserFromProject">Remove</button>
                </div>
            </div>
        </div>
    </div>
}

<h3>Project Requests</h3>
<div class="project-grid">
    @foreach (var request in projectRequests)
    {
        <div class="project-cell">
            <h4>Project: @request.Project.prjTitle</h4>
            <div>
                <div>User: @request.User.firstName @request.User.lastName</div>
                <div>Bio: @request.User.userBio</div>
                <div>Email: @request.User.userEmail</div>
            </div>
            <div>
                <button class="btn btn-success" @onclick="() => AcceptRequest(request)">Accept</button>
                <button class="btn btn-danger" @onclick="() => DeclineRequest(request)">Decline</button>
            </div>
        </div>
    }
</div>

<h3>Users</h3>
<div class="project-grid">
    @foreach (var user in users)
    {
        <div class="project-cell">
            <h4>@user.firstName @user.lastName</h4>
            <!-- Display other user details as needed -->
        </div>
    }
</div>




@code {
    List<Project> projects;
    List<ProjectRequest> projectRequests;
    List<User> users;
    List<UserProjects> userProjects;

    bool showConfirmation;
    int userProjectIdToRemove;

    protected override async Task OnInitializedAsync()
    {
        projects = await HttpClient.GetFromJsonAsync<List<Project>>("api/projects");
        projectRequests = await HttpClient.GetFromJsonAsync<List<ProjectRequest>>("api/projects/project-requests");
        users = await HttpClient.GetFromJsonAsync<List<User>>("api/projects/users");
        userProjects = await HttpClient.GetFromJsonAsync<List<UserProjects>>("api/projects/user-projects");
    }

    private async Task AcceptRequest(ProjectRequest request)
    {
        await HttpClient.PostAsync($"api/projects/accept-request/{request.RequestID}", null);
        projectRequests.Remove(request);
    }

    private async Task DeclineRequest(ProjectRequest request)
    {
        await HttpClient.PostAsync($"api/projects/decline-request/{request.RequestID}", null);
        projectRequests.Remove(request);
    }
    
    private void ConfirmRemoveUserFromProject(int userProjectID)
    {
        userProjectIdToRemove = userProjectID;
        showConfirmation = true;
    }

    private async Task RemoveUserFromProject()
    {
        await HttpClient.DeleteAsync($"api/projects/remove-user-from-project/{userProjectIdToRemove}");
        userProjects.RemoveAll(up => up.userProjectID == userProjectIdToRemove);
        showConfirmation = false;
    }

    private void CancelRemoveUserFromProject()
    {
        showConfirmation = false;
    }
}

<style>
    .project-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px; /* Adjust the gap between cells */
    }

    .project-cell {
        border: 1px solid #ccc;
        border-radius: 20px;
        box-shadow: 0 4px 4px rgba(0, 0, 0, 0.1), 2px 0 2px rgba(0, 0, 0, 0.1), -2px 0 2px rgba(0, 0, 0, 0.05);
        padding: 10px;
        text-align: center;
        margin: 10px;
    }
</style>
